use std::str::FromStr;

// Glob imports? What's that?
use crate::engine::core::dsl::ast_raw::{
	VarID, TypeID, Immediate, Literal, Expression, BinOp, BinOps, VarDecl, Statement, Conditional, Place, Assign, Block, BlockType, new_binop,
	};

grammar;

match {
    "let",
	"if",
	"else",
    ":",
    "=",
	"==",
	"<",
	"<=",
	">",
	">=",
    ";",
	"(",
	")",
	"{",
	"}",
	"#",
	"`",
	"*",
	"-",
	"+",
	"true",
	"false",
    "Number", "Rank", "Suit", "Zone", "Player",
    // Rank Literals
    "Ace", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King",
    // Suit Literals
    "Hearts", "Diamonds", "Clubs", "Spades",
    // Other terminals
    r"[a-zA-Z_][a-zA-Z0-9_]*" => Identifier, // Variable names
    r"-?\d+" => NumberString,                // Integer literals
    r#""([^"\\]|\\.)*""# => StringLiteral,     // String literals
	
    r"\s*" => { },
}



RankString: &'input str = {
    "Ace",
    "Two",
    "Three",
    "Four",
    "Five",
    "Six",
    "Seven",
    "Eight",
    "Nine",
    "Ten",
    "Jack",
    "Queen",
    "King",
};

SuitString: &'input str = {
	"Hearts",
	"Diamonds",
	"Clubs",
	"Spades",
}

pub NumberLiteral : Literal = NumberString => Literal::Number(String::from(<>));

pub RankLiteral : Literal = {
	<s:RankString> => Literal::RankLiteral(String::from(s)),
}

pub SuitLiteral : Literal = {
	<s:SuitString> => Literal::SuitLiteral(String::from(s)),
}

pub BooleanLiteral : Literal = {
	"true" => Literal::BooleanLiteral(String::from(<>)),
	"false" => Literal::BooleanLiteral(String::from(<>)),
}

pub ZoneLiteral : Literal = {
	"#" <s:Identifier> "#" => Literal::ZoneLiteral(String::from(<>)),
}

pub PlayerLiteral : Literal = {
	"`" <s:Identifier> "`" => Literal::PlayerLiteral(String::from(<>)),
}

pub Literal : Literal = {
	NumberLiteral => <>,
	RankLiteral => <>,
	SuitLiteral => <>,
	BooleanLiteral => <>,
	ZoneLiteral => <>,
	PlayerLiteral => <>,
}

pub Expression : Expression = CompExpr;

CompExpr: Expression = {
	<l:CompExpr> "==" <r:AddiExpr> => new_binop(l, BinOps::Equal, r),
	<l:CompExpr> ">" <r:AddiExpr> => new_binop(l, BinOps::GreaterThan, r),
	<l:CompExpr> ">=" <r:AddiExpr> => new_binop(l, BinOps::GreaterEqual, r),
	<l:CompExpr> "<" <r:AddiExpr> => new_binop(l, BinOps::LesserThan, r),
	<l:CompExpr> "<=" <r:AddiExpr> => new_binop(l, BinOps::LesserEqual, r),
	AddiExpr,
}

AddiExpr : Expression = {
	<l:AddiExpr> "+" <r:MultExpr> => new_binop(l, BinOps::Add, r),
	<l:AddiExpr> "-" <r:MultExpr> => new_binop(l, BinOps::Subtract, r),
	MultExpr,
}

MultExpr : Expression = {
	<l:MultExpr> "*" <r:AtomExpr> => new_binop(l, BinOps::Multiply, r),
	AtomExpr,
}

pub AtomExpr : Expression = {
	Literal => Expression::Imm(<>),
	Identifier => Expression::Var(VarID::from(<>)),
}

pub Statement : Statement = {
	<b:Block> ";" => Statement::Block(b),
	VarDecl => Statement::Decl(<>),
	Assign => Statement::Assign(<>),
	Conditional => Statement::Conditional(<>),
}

pub VarDecl : VarDecl = {
	"let" <i:Identifier> ":" <t:Identifier> <init : ("=" <Expression>)?> ";" => VarDecl { var_type: TypeID::from(t), var_name : VarID::from(i), value : init },

}

pub Assign : Assign = {
	<p:Place> "=" <e:Expression> ";" => Assign { from : e, to: p},
}


pub Place : Place = {
	<Identifier> => Place::Var(VarID::from(<>)),
}

pub Conditional : Conditional = {
	"if" <e:Expression> <t:Block> <f : ("else" <Block>)?>";" => Conditional { condition : e, exec_if : t, exec_else : f },
}

pub Block : Block = {
	"{" <l:StatementList> "}" => Block { block_type : BlockType::Normal, instructions : l},
	
}

pub StatementList : Vec<Statement> = {

	Statement => Vec::from([<>]),
	<l : StatementList> <s : Statement> => {let mut vec = l; vec.push(s); vec},
}

