/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as RulesetsImport } from './routes/rulesets'
import { Route as ProfileImport } from './routes/profile'
import { Route as LoginImport } from './routes/login'
import { Route as CardsImport } from './routes/cards'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as RulesetsCreateImport } from './routes/rulesets/create'
import { Route as GamesGameIdImport } from './routes/games/$gameId'
import { Route as RulesetsRulesetIdEditImport } from './routes/rulesets/$rulesetId/edit'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const RulesetsRoute = RulesetsImport.update({
  id: '/rulesets',
  path: '/rulesets',
  getParentRoute: () => rootRoute,
} as any)

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const CardsRoute = CardsImport.update({
  id: '/cards',
  path: '/cards',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RulesetsCreateRoute = RulesetsCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => RulesetsRoute,
} as any)

const GamesGameIdRoute = GamesGameIdImport.update({
  id: '/games/$gameId',
  path: '/games/$gameId',
  getParentRoute: () => rootRoute,
} as any)

const RulesetsRulesetIdEditRoute = RulesetsRulesetIdEditImport.update({
  id: '/$rulesetId/edit',
  path: '/$rulesetId/edit',
  getParentRoute: () => RulesetsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/cards': {
      id: '/cards'
      path: '/cards'
      fullPath: '/cards'
      preLoaderRoute: typeof CardsImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/rulesets': {
      id: '/rulesets'
      path: '/rulesets'
      fullPath: '/rulesets'
      preLoaderRoute: typeof RulesetsImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/games/$gameId': {
      id: '/games/$gameId'
      path: '/games/$gameId'
      fullPath: '/games/$gameId'
      preLoaderRoute: typeof GamesGameIdImport
      parentRoute: typeof rootRoute
    }
    '/rulesets/create': {
      id: '/rulesets/create'
      path: '/create'
      fullPath: '/rulesets/create'
      preLoaderRoute: typeof RulesetsCreateImport
      parentRoute: typeof RulesetsImport
    }
    '/rulesets/$rulesetId/edit': {
      id: '/rulesets/$rulesetId/edit'
      path: '/$rulesetId/edit'
      fullPath: '/rulesets/$rulesetId/edit'
      preLoaderRoute: typeof RulesetsRulesetIdEditImport
      parentRoute: typeof RulesetsImport
    }
  }
}

// Create and export the route tree

interface RulesetsRouteChildren {
  RulesetsCreateRoute: typeof RulesetsCreateRoute
  RulesetsRulesetIdEditRoute: typeof RulesetsRulesetIdEditRoute
}

const RulesetsRouteChildren: RulesetsRouteChildren = {
  RulesetsCreateRoute: RulesetsCreateRoute,
  RulesetsRulesetIdEditRoute: RulesetsRulesetIdEditRoute,
}

const RulesetsRouteWithChildren = RulesetsRoute._addFileChildren(
  RulesetsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/cards': typeof CardsRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/rulesets': typeof RulesetsRouteWithChildren
  '/signup': typeof SignupRoute
  '/games/$gameId': typeof GamesGameIdRoute
  '/rulesets/create': typeof RulesetsCreateRoute
  '/rulesets/$rulesetId/edit': typeof RulesetsRulesetIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/cards': typeof CardsRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/rulesets': typeof RulesetsRouteWithChildren
  '/signup': typeof SignupRoute
  '/games/$gameId': typeof GamesGameIdRoute
  '/rulesets/create': typeof RulesetsCreateRoute
  '/rulesets/$rulesetId/edit': typeof RulesetsRulesetIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/cards': typeof CardsRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/rulesets': typeof RulesetsRouteWithChildren
  '/signup': typeof SignupRoute
  '/games/$gameId': typeof GamesGameIdRoute
  '/rulesets/create': typeof RulesetsCreateRoute
  '/rulesets/$rulesetId/edit': typeof RulesetsRulesetIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/cards'
    | '/login'
    | '/profile'
    | '/rulesets'
    | '/signup'
    | '/games/$gameId'
    | '/rulesets/create'
    | '/rulesets/$rulesetId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/cards'
    | '/login'
    | '/profile'
    | '/rulesets'
    | '/signup'
    | '/games/$gameId'
    | '/rulesets/create'
    | '/rulesets/$rulesetId/edit'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/cards'
    | '/login'
    | '/profile'
    | '/rulesets'
    | '/signup'
    | '/games/$gameId'
    | '/rulesets/create'
    | '/rulesets/$rulesetId/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  CardsRoute: typeof CardsRoute
  LoginRoute: typeof LoginRoute
  ProfileRoute: typeof ProfileRoute
  RulesetsRoute: typeof RulesetsRouteWithChildren
  SignupRoute: typeof SignupRoute
  GamesGameIdRoute: typeof GamesGameIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  CardsRoute: CardsRoute,
  LoginRoute: LoginRoute,
  ProfileRoute: ProfileRoute,
  RulesetsRoute: RulesetsRouteWithChildren,
  SignupRoute: SignupRoute,
  GamesGameIdRoute: GamesGameIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/cards",
        "/login",
        "/profile",
        "/rulesets",
        "/signup",
        "/games/$gameId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/cards": {
      "filePath": "cards.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx"
    },
    "/rulesets": {
      "filePath": "rulesets.tsx",
      "children": [
        "/rulesets/create",
        "/rulesets/$rulesetId/edit"
      ]
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/games/$gameId": {
      "filePath": "games/$gameId.tsx"
    },
    "/rulesets/create": {
      "filePath": "rulesets/create.tsx",
      "parent": "/rulesets"
    },
    "/rulesets/$rulesetId/edit": {
      "filePath": "rulesets/$rulesetId/edit.tsx",
      "parent": "/rulesets"
    }
  }
}
ROUTE_MANIFEST_END */
