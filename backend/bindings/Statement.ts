// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { BooleanExpression } from "./BooleanExpression";
import type { CardCollectionExpression } from "./CardCollectionExpression";
import type { ConditionalStatement } from "./ConditionalStatement";
import type { NumberExpression } from "./NumberExpression";
import type { Offer } from "./Offer";
import type { PlayerCollectionExpression } from "./PlayerCollectionExpression";
import type { ZoneCollectionExpression } from "./ZoneCollectionExpression";
import type { ZoneExpression } from "./ZoneExpression";

export type Statement = "Empty" | { "Block": Array<Statement> } | { "Conditional": ConditionalStatement } | { "While": { condition: BooleanExpression, body: Statement, } } | { "Broadcast": { msg: string, to: PlayerCollectionExpression, } } | { "DeclareWinner": PlayerCollectionExpression } | { "SetNumber": { name: string, value: NumberExpression, } } | { "AdvancePlayerStateByType": { to_advance: NumberExpression, type_name: string, } } | { "AdvancePlayerState": { to_advance: NumberExpression, } } | { "MoveCardsTo": { source: CardCollectionExpression, dest: ZoneExpression, } } | { "Deal": { num_cards: NumberExpression, source: ZoneExpression, dest: ZoneCollectionExpression, } } | { "Shuffle": ZoneCollectionExpression } | { "EnterPhase": string } | { "Offer": Offer };
